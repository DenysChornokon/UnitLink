"""Initial migration - added core models (User, Device, Logs, Alerts, Registration)

Revision ID: ab7a2c991904
Revises: 
Create Date: 2025-05-01 16:45:30.268370

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'ab7a2c991904'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('username', sa.String(length=80), nullable=False),
    sa.Column('email', sa.String(length=120), nullable=False),
    sa.Column('password_hash', sa.String(length=128), nullable=False),
    sa.Column('role', sa.Enum('ADMIN', 'OPERATOR', name='userrole'), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('last_login_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_username'), ['username'], unique=True)

    op.create_table('devices',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('location_lat', sa.Float(), nullable=True),
    sa.Column('location_lon', sa.Float(), nullable=True),
    sa.Column('status', sa.Enum('ONLINE', 'OFFLINE', 'UNSTABLE', 'UNKNOWN', name='devicestatus'), nullable=False),
    sa.Column('last_seen', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('added_by_user_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['added_by_user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('devices', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_devices_name'), ['name'], unique=True)

    op.create_table('registration_requests',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('requested_username', sa.String(length=80), nullable=False),
    sa.Column('email', sa.String(length=120), nullable=False),
    sa.Column('reason', sa.Text(), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'APPROVED', 'REJECTED', name='registrationrequeststatus'), nullable=False),
    sa.Column('requested_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('reviewed_by_user_id', sa.UUID(), nullable=True),
    sa.Column('reviewed_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['reviewed_by_user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('alerts',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('severity', sa.Enum('INFO', 'WARNING', 'CRITICAL', name='alertseverity'), nullable=False),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('is_acknowledged', sa.Boolean(), nullable=False),
    sa.Column('acknowledged_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('device_id', sa.UUID(), nullable=True),
    sa.Column('acknowledged_by_user_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['acknowledged_by_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['device_id'], ['devices.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('alerts', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_alerts_device_id'), ['device_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_alerts_is_acknowledged'), ['is_acknowledged'], unique=False)
        batch_op.create_index(batch_op.f('ix_alerts_timestamp'), ['timestamp'], unique=False)

    op.create_table('connection_logs',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('event_type', sa.Enum('CONNECTED', 'DISCONNECTED', 'STATUS_CHANGE', 'PARAMETER_THRESHOLD', 'CONFIG_UPDATE', 'USER_ACTION', name='logeventtype'), nullable=False),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('device_id', sa.UUID(), nullable=True),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['device_id'], ['devices.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('connection_logs', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_connection_logs_device_id'), ['device_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_connection_logs_timestamp'), ['timestamp'], unique=False)
        batch_op.create_index(batch_op.f('ix_connection_logs_user_id'), ['user_id'], unique=False)

    op.create_table('device_status_history',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('device_id', sa.UUID(), nullable=False),
    sa.Column('timestamp', sa.DateTime(timezone=True), nullable=False),
    sa.Column('signal_rssi', sa.Integer(), nullable=True),
    sa.Column('latency_ms', sa.Integer(), nullable=True),
    sa.Column('packet_loss_percent', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['device_id'], ['devices.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('device_status_history', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_device_status_history_device_id'), ['device_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_device_status_history_timestamp'), ['timestamp'], unique=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('device_status_history', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_device_status_history_timestamp'))
        batch_op.drop_index(batch_op.f('ix_device_status_history_device_id'))

    op.drop_table('device_status_history')
    with op.batch_alter_table('connection_logs', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_connection_logs_user_id'))
        batch_op.drop_index(batch_op.f('ix_connection_logs_timestamp'))
        batch_op.drop_index(batch_op.f('ix_connection_logs_device_id'))

    op.drop_table('connection_logs')
    with op.batch_alter_table('alerts', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_alerts_timestamp'))
        batch_op.drop_index(batch_op.f('ix_alerts_is_acknowledged'))
        batch_op.drop_index(batch_op.f('ix_alerts_device_id'))

    op.drop_table('alerts')
    op.drop_table('registration_requests')
    with op.batch_alter_table('devices', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_devices_name'))

    op.drop_table('devices')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_username'))
        batch_op.drop_index(batch_op.f('ix_users_email'))

    op.drop_table('users')
    # ### end Alembic commands ###

# ---------------------------------------------------------------

# Імпортуємо необхідне
from app import db
from app.models import User, UserRole
import datetime # Імпортуємо datetime для last_login_at

admin_username = 'admin'
admin_email = 'admin@unitlink.local'
admin_password = '12345'

user_exists = User.query.filter((User.username == admin_username) | (User.email == admin_email)).first()

if user_exists:
    print(f"Користувач з іменем '{admin_username}' або email '{admin_email}' вже існує.")
else:
    admin_user = User(
        username=admin_username,
        email=admin_email,
        role=UserRole.ADMIN,
        is_active=True,
        last_login_at=None
    )

    admin_user.set_password(admin_password)

    db.session.add(admin_user)

    try:
        db.session.commit()
        print(f"Адміністратора '{admin_user.username}' успішно створено!")
    except Exception as e:
        db.session.rollback()
        print(f"Помилка при створенні адміністратора: {e}")
